import os
import shutil
import sys
import getpass
import time
import random


def time_taken(func):
    def calc_time(*args, **kwrgs):
        t1 = time.time()
        result = func(*args, **kwrgs)
        t2 = time.time()
        print(f"time taken is {t2 - t1} sec")
        return result
    return(calc_time)

def find_armstrong(num):
    '''
    finds and prints given number is armstrong or not 
    also return value is yes if its armstrong else no
    Ex: num is abc so order is 3
    pow abc = (a)3 + (b)3 + (c)3 
    '''
    n = len(str(num))
    total = 0
    temp_num = num
    while(temp_num != 0):
        remainder = temp_num%10
        tempt_total = pow(remainder,n)
        temp_num /= 10
        temp_num = int(temp_num)
        total +=tempt_total
        # print(f"lenght is {remainder}, {temp_num}, {tempt_total}")
    if num == total:
        print(f"given number, {num} is armsstrong number")
        return "yes"
    else:
        print(f"given number, {num} is not armsstrong number")
        return "no"        
    print(f"random number is--> {random.randrange(0, 10)}")

def factorial(num):
    '''
    finds factorial of a given number with recursion
    '''
    fact = 0
    while(num > 1):
        return (num * factorial((num - 1)))    
    return 1


@time_taken
def prime_or_not(num):
    i = 0
    limit = int(num/2) + 1
    is_prime = True
    print(f"limit is {limit}")
    for j in range(2, limit):
        if (num % j):
            pass
        else:
            print(f"given number is {num} is not prime")
            is_prime = False
            break    
    if is_prime:
        print(f"given number is {num} is prime")

        
# prime_or_not(19299137779)
@time_taken
def prime_nums_in_interval(start = 100000, end = 90000):
    # Python program to print all 
    # prime number in an interval
    # number should be greater than 1
    result = []
    step = 1
    if start > end:
        step = -1
    for i in range(start, end, step):
        # print(f"{i}-->", end=" ")
        if i > 1:
            for j in range (2, (int(i/2) + 1)):
                # print(f"{j},", end="")
                if not (i%j):
                    break
            else:
                print(i)
                result.append(i)
        # print()
    print(f"prime numbers between {start} and {end} are --> {result}")

@time_taken
def find_prime_inlist():
    result = []    
    prime_list = [99991, 99989, 99971, 99961, 99929, 99923, 99907, 99901, 99881, 99877, 99871, 99859, 99839, 99833, 99829, 99823, 99817, 99809, 99793, 99787, 99767, 99761, 99733, 99721, 99719, 99713, 99709, 99707, 99689, 99679, 99667, 99661, 99643, 99623, 99611, 99607, 99581, 99577, 99571, 99563, 99559, 99551, 99529, 99527, 99523, 99497, 99487, 99469, 99439, 99431, 99409, 99401, 99397, 99391, 99377, 99371, 99367, 99349, 99347, 99317, 99289, 99277, 99259, 99257, 99251, 99241, 99233, 99223, 99191, 99181, 99173, 99149, 99139, 99137, 99133, 99131, 99119, 99109, 99103, 99089, 99083, 99079, 99053, 99041, 99023, 99017, 99013, 98999, 98993, 98981, 98963, 98953, 98947, 98939, 98929, 98927, 98911, 98909, 98899, 98897, 98893, 98887, 98873, 98869, 98867, 98849, 98837, 98809, 98807, 98801, 98779, 98773, 98737, 98731, 98729, 98717, 98713, 98711, 98689, 98669, 98663, 98641, 98639, 98627, 98621, 98597, 98573, 98563, 98561, 98543, 98533, 98519, 98507, 98491, 98479, 98473, 98467, 98459, 98453, 98443, 98429, 98419, 98411, 98407, 98389, 98387, 98377, 98369, 98347, 98327, 98323, 98321, 98317, 98299, 98297, 98269, 98257, 98251, 98227, 98221, 98213, 98207, 98179, 98143, 98129, 98123, 98101, 98081, 98057, 98047, 98041, 98017, 98011, 98009, 97987, 97973, 97967, 97961, 97943, 97931, 97927, 97919, 97883, 97879, 97871, 97861, 97859, 97849, 97847, 97843, 97841, 97829, 97813, 97789, 97787, 97777, 97771, 97729, 97711, 97687, 97673, 97651, 97649, 97613, 97609, 97607, 97583, 97579, 97577, 97571, 97561, 97553, 97549, 97547, 97523, 97511, 97501, 97499, 97463, 97459, 97453, 97441, 97429, 97423, 97397, 97387, 97381, 97379, 97373, 97369, 97367, 97327, 97303, 97301, 97283, 97259, 97241, 97231, 97213, 97187, 97177, 97171, 97169, 97159, 97157, 97151, 97127, 97117, 97103, 97081, 97073, 97039, 97021, 97007, 97003, 97001, 96997, 96989, 96979, 96973, 96959, 96953, 96931, 96911, 96907, 96893, 96857, 96851, 96847, 96827, 96823, 96821, 96799, 96797, 96787, 96779, 96769, 96763, 96757, 96749, 96739, 96737, 96731, 96703, 96697, 96671, 96667, 96661, 96643, 96601, 96589, 96587, 96581, 96557, 96553, 96527, 96517, 96497, 96493, 96487, 96479, 96469, 96461, 96457, 96451, 96443, 96431, 96419, 96401, 96377, 96353, 96337, 96331, 96329, 96323, 96293, 96289, 96281, 96269, 96263, 96259, 96233, 96223, 96221, 96211, 96199, 96181, 96179, 96167, 96157, 96149, 96137, 96097, 96079, 96059, 96053, 96043, 96017, 96013, 96001, 95989, 95987, 95971, 95959, 95957, 95947, 95929, 95923, 95917, 95911, 95891, 95881, 95873, 95869, 95857, 95819, 95813, 95803, 95801, 95791, 95789, 95783, 95773, 95747, 95737, 95731, 95723, 95717, 95713, 95707, 95701, 95651, 95633, 95629, 95621, 95617, 95603, 95597, 95581, 95569, 95561, 95549, 95539, 95531, 95527, 95507, 95483, 95479, 95471, 95467, 95461, 95443, 95441, 95429, 95419, 95413, 95401, 95393, 95383, 95369, 95339, 95327, 95317, 95311, 95287, 95279, 95273, 95267, 95261, 95257, 95239, 95233, 95231, 95219, 95213, 95203, 95191, 95189, 95177, 95153, 95143, 95131, 95111, 95107, 95101, 95093, 95089, 95087, 95083, 95071, 95063, 95027, 95021, 95009, 95003, 94999, 94993, 94961, 94951, 94949, 94933, 94907, 94903, 94889, 94873, 94849, 94847, 94841, 94837, 94823, 94819, 94811, 94793, 94789, 94781, 94777, 94771, 94747, 94727, 94723, 94709, 94693, 94687, 94651, 94649, 94621, 94613, 94603, 94597, 94583, 94573, 94561, 94559, 94547, 94543, 94541, 94531, 94529, 94513, 94483, 94477, 94463, 94447, 94441, 94439, 94433, 94427, 94421, 94399, 94397, 94379, 94351, 94349, 94343, 94331, 94327, 94321, 94309, 94307, 94291, 94273, 94261, 94253, 94229, 94219, 94207, 94201, 94169, 94153, 94151, 94121, 94117, 94111, 94109, 94099, 94079, 94063, 94057, 94049, 94033, 94009, 94007, 93997, 93983, 93979, 93971, 93967, 93949, 93941, 93937, 93923, 93913, 93911, 93901, 93893, 93889, 93887, 93871, 93851, 93827, 93811, 93809, 93787, 93763, 93761, 93739, 93719, 93703, 93701, 93683, 93637, 93629, 93607, 93601, 93581, 93563, 93559, 93557, 93553, 93529, 93523, 93503, 93497, 93493, 93491, 93487, 93481, 93479, 93463, 93427, 93419, 93407, 93383, 93377, 93371, 93337, 93329, 93323, 93319, 93307, 93287, 93283, 93281, 93263, 93257, 93253, 93251, 93241, 93239, 93229, 93199, 93187, 93179, 93169, 93151, 93139, 93133, 93131, 93113, 93103, 93097, 93089, 93083, 93077, 93059, 93053, 93047, 93001, 92993, 92987, 92959, 92957, 92951, 92941, 92927, 92921, 92899, 92893, 92867, 92863, 92861, 92857, 92849, 92831, 92821, 92809, 92801, 92791, 92789, 92779, 92767, 92761, 92753, 92737, 92723, 92717, 92707, 92699, 92693, 92683, 92681, 92671, 92669, 92657, 92647, 92641, 92639, 92627, 92623, 92593, 92581, 92569, 92567, 92557, 92551, 92507, 92503, 92489, 92479, 92467, 92461, 92459, 92431, 92419, 92413, 92401, 92399, 92387, 92383, 92381, 92377, 92369, 92363, 92357, 92353, 92347, 92333, 92317, 92311, 92297, 92269, 92251, 92243, 92237, 92233, 92227, 92221, 92219, 92203, 92189, 92179, 92177, 92173, 92153, 92143, 92119, 92111, 92107, 92083, 92077, 92051, 92041, 92033, 92009, 92003, 91997, 91969, 91967, 91961, 91957, 91951, 91943, 91939, 91921, 91909, 91873, 91867, 91841, 91837, 91823, 91813, 91811, 91807, 91801, 91781, 91771, 91757, 91753, 91733, 91711, 91703, 91691, 91673, 91639, 91631, 91621, 91591, 91583, 91577, 91573, 91571, 91541, 91529, 91513, 91499, 91493, 91463, 91459, 91457, 91453, 91433, 91423, 91411, 91397, 91393, 91387, 91381, 91373, 91369, 91367, 91331, 91309, 91303, 91297, 91291, 91283, 91253, 91249, 91243, 91237, 91229, 91199, 91193, 91183, 91163, 91159, 91153, 91151, 91141, 91139, 91129, 91127, 91121, 91099, 91097, 91081, 91079, 91033, 91019, 91009, 90997, 90989, 90977, 90971, 90947, 90931, 90917, 90911, 90907, 90901, 90887, 90863, 90847, 90841, 90833, 90823, 90821, 90803, 90793, 90787, 90749, 90731, 90709, 90703, 90697, 90679, 90677, 90659, 90647, 90641, 90631, 90619, 90617, 90599, 90583, 90547, 90533, 90529, 90527, 90523, 90511, 90499, 90481, 90473, 90469, 90439, 90437, 90407, 90403, 90401, 90397, 90379, 90373, 90371, 90359, 90353, 90313, 90289, 90281, 90271, 90263, 90247, 90239, 90227, 90217, 90203, 90199, 90197, 90191, 90187, 90173, 90163, 90149, 90127, 90121, 90107, 90089, 90073, 90071, 90067, 90059, 90053, 90031, 90023, 90019, 90017, 90011, 90007, 90001]

    for i in prime_list:
        if i > 1:
            for j in range(2, (int(i/2)+1)):
                if not (i%j):
                    break
            else:
                result.append(i)
    print(f"prime numbers between from a given list are --> {result}")

find_prime_inlist()


def cretelist(num):
    li2= []
    for i in range(0, 100):
        li2.append(int(i))

    li2.insert(50, -10)
    print(li2)


@time_taken
def fibonaci_series(length = 0, maxnum = 0):
    if length != 0 or maxnum != 0 :
        a = 0
        b = 1
        total = sum([a,b])
        print(f"first total{total}")
        fib_ser = []
        fib_ser.append(a)
        fib_ser.append(b)
        if length != 0:
            for i in range(2, length):
                total = sum([a,b])
                fib_ser.append(total)
                a = b
                b = total

        elif maxnum != 0:
            while(total<= maxnum):
                a = b
                b = total
                fib_ser.append(total)
                total = sum([a,b])

            

        print(f"fibonacci series is {fib_ser}")
    else:
        print("please provide the range/max number")

def myprint(func):
    func()


@time_taken
def looong_int(num):
    for i in range(num):
        i = i*2

def printerror():
    print(f"[ERROR]:    ", end="")

    
    print(f"<---")

@time_taken
def number_sorting(num = 0):
    ''' Takes numbers from key board.
    default it takes 10 numbers
    could be controlled by parameter 'num'    
    '''
    print(__file__)
    print(f"given input is {num}")
    if num == 0:
        num = 10
    print(f"given input is {num}")
    li1=[]
    li1 = [1, 4, 66, -9, -39, -88, 99, 66, 88, 99]
    print("enter input numbers")

    while len(li1) < num:
        try:
            li1.append(int(input()))
        
        except ValueError as err:
            print(f"error: {err}")
        except KeyboardInterrupt:
            print("exiting as there is a keyboard interrupt")
            sys.exit(-1)
        else:
            pass
            # print("in else")
        finally:
            pass
            # print("in finally")
        # print("In while loop end")            

    print(f"given numbers {li1}")

    li1.sort(reverse=True)
    li1 = sorted(li1, reverse=True)

    ahha + bin

    
    print(f"sorted numbers are -->{li1}")
    print(f"second least number is {li1[(len(li1) - 2)]}")
